include "reference"

ama {

  # =============================

  # Indicates if configuration should be printed to System.out at the beginning.
  renderConfiguration = false

  # =============================

  initializeOnStartup {

    # Appending actors list below with ${ama.initializeOnStartup.actors} means that actors defined in reference.conf of
    # AkkaMicroArchitecture project will be also initialized.
    actors = ${ama.initializeOnStartup.actors} [

      # --- process controller ---

      {
        class = "as.chessproblem.controller.ProcessController"
        initializationOrder = 900

        config = {
            shutdownOnAllBoardsPublished = false
            shutdownOnAllBoardsSaved = true
        }
      },

      # --- boards publishers (printers) ---

      {
        class = "as.chessproblem.publisher.file.AcceptedBoardsFilePublisher"
        initializationOrder = 1000

        config = {
          safe = "    ", unsafe = " ~~ ", empty = " :: ", king = " Ki ", queen = " Q  ", rook = " R  ", bishop = " B  ", knight = " Kn "
          file = "boards.txt"
          append = false
          bufferSizeInBytes = 2048
        }
      },
      {
        class = "as.chessproblem.publisher.log.AcceptedBoardsLogPublisher"
        initializationOrder = 1000

        config = {
          safe = "    ", unsafe = " ~~ ", empty = " :: ", king = " Ki ", queen = " Q  ", rook = " R  ", bishop = " B  ", knight = " Kn "

          drawBoardsWhileProduced = true
          drawBoardsAtTheEnd = false

          #If greater than 0 will print log like: "Boards count: $acceptedResultsCount" on every Xth produced board
          #(while X is the value of printProducedBoardNumberModuloFactor).
          printProducedBoardNumberModuloFactor = 100
        }
      },

      # --- accumulators ---

      #{
      #  class = "as.chessproblem.accumulator.AcceptedBoardsAccumulator"
      #  initializationOrder = 1000
      #},
      {
        class = "as.chessproblem.accumulator.AcceptedBoardsFakeAccumulator"
        initializationOrder = 1000
      },

      # --- acceptors ---

      #{
      #  class = "as.chessproblem.acceptor.UniqueBoardsAcceptor"
      #  initializationOrder = 1000
      #},
      {
        class = "as.chessproblem.acceptor.AllBoardsAcceptor"
        initializationOrder = 1000
      },

      # --- transformers ---

      {
        class = "as.chessproblem.transform.FakeUniqueBoardTransformer"
        initializationOrder = 1000
      },
      #{
      #  class = "as.chessproblem.transform.UniqueBoardTransformer"
      #  initializationOrder = 1000
      #},

      # --- boards producer (main algorithm is here) ---

      {
        class = "as.chessproblem.generator.UniqueBoardsGenerator"
        initializationOrder = 1100
      },

      # --- command line arguments parser ---

      {
        class = "as.chessproblem.cmdline.CommandLineArgumentsParser"
        initializationOrder = 2000
      }
    ]
  }

  # =============================

  commandLine {
    overrideOriginallyPassedArguments = true

    # is 4165036 correct? or 4016332? 396084 / 49512 unique ??
    #arguments = "   7   7 2    King  2 Bishop   2   Queen 1 Knight   "

    # should be ??
    #arguments = "3 3 3 LightFlyer 1 King"

    # should be 4 / unique 1
    #arguments = "2 2 1 LightFlyer"

    # should be 6 / unique 2
    #arguments = "2 2 2 LightFlyer"

    # should be 9 / unique 3
    #arguments = "3 3 1 King"

    # should be 16 / unique 4
    #arguments = "3 3 2 King"

    # should be 4 / unique 1
    #arguments = "3 3 2 King 1 Rook"

    # should be 8 / unique 2
    #arguments = "4 4 4 Knight 2 Rook"

    # should be 2 / unique 1
    #arguments = "4 4 4 Queen"

    # should be 10 / unique 2
    #arguments = "5 5 5 Queen"

    # should be 4 / unique 1
    #arguments = "6 6 6 Queen"

    # should be 40 / unique 6
    #arguments = "7 7 7 Queen"

    # should be 92 / unique 12
    arguments = "8 8 8 Queen"

    # should be 352 / unique 46
    #arguments = "9 9 9 Queen"

    # should be 724 / unique 92
    #arguments = "10 10 10 Queen"
  }

  # =============================
}

# We need some back-pressure when a lot of messages is produced.
boundedMailbox {
  mailbox-type = "akka.dispatch.BoundedMailbox"
  mailbox-capacity = 1000
  mailbox-push-timeout-time = 20s
}

# We need some back-pressure when a lot of logs is produced.
loggerBoundedMailbox {
  mailbox-type = "akka.dispatch.BoundedMailbox"
  mailbox-capacity = 1000
  mailbox-push-timeout-time = 20s
}

# Original Akka configuration starts here.
akka {

  log-dead-letters = 40
  log-dead-letters-during-shutdown = on

  loglevel = "DEBUG"
  stdout-loglevel = "DEBUG"

  loggers = ["akka.event.slf4j.Slf4jLogger"]

  actor {

    debug {
      lifecycle = on
    }

    # Just for testing purposes - enable them if you want to be sure that all messages and creators are serializable.
    serialize-creators = off
    serialize-messages = off

    deployment {

      /system/log1-Slf4jLogger {
        mailbox = loggerBoundedMailbox
      }

      /Broadcaster {
        mailbox = boundedMailbox
      }

      #/"Forwarder-UniqueBoardsAcceptor-*" {
      #  mailbox = boundedMailbox
      #}

      #/UniqueBoardsAcceptor {
      #  mailbox = boundedMailbox
      #}

      #/"Forwarder-AllBoardsAcceptor-*" {
      #  mailbox = boundedMailbox
      #}

      #/AllBoardsAcceptor {
      #  mailbox = boundedMailbox
      #}

      #/"Forwarder-AcceptedBoardsAccumulator-*" {
      #  mailbox = boundedMailbox
      #}

      #/AcceptedBoardsAccumulator {
      #  mailbox = boundedMailbox
      #}

      #/"Forwarder-AcceptedBoardsFakeAccumulator-*" {
      #  mailbox = boundedMailbox
      #}

      #/AcceptedBoardsFakeAccumulator {
      #  mailbox = boundedMailbox
      #}

      #/"Forwarder-AcceptedBoardsLogPrinter-*" {
      #  mailbox = boundedMailbox
      #}

      #/AcceptedBoardsLogPrinter {
      #  mailbox = boundedMailbox
      #}

      #/"Forwarder-AcceptedBoardsFilePrinter-*" {
      #  mailbox = boundedMailbox
      #}

      #/AcceptedBoardsFilePrinter {
      #  mailbox = boundedMailbox
      #}
    }

    #default-dispatcher {
    #  throughput = 1
    #}
  }
}
