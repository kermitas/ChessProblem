include "reference"

ama {

  # =============================

  # Indicates if configuration should be printed to System.out at the beginning.
  renderConfiguration = false

  # =============================

  initializeOnStartup {

    # Appending actors list below with ${ama.initializeOnStartup.actors} means that actors defined in reference.conf of
    # AkkaMicroArchitecture project will be also initialized.
    actors = ${ama.initializeOnStartup.actors} [

      # --- process controller ---

      {
        class = "as.chessproblem.controller.ProcessController"
        initializationOrder = 900

        config = {
            shutdownOnAllBoardsPublished = false
            shutdownOnAllBoardsSaved = true
        }
      },

      # --- boards publishers (printers) ---

      {
        class = "as.chessproblem.publisher.file.AcceptedBoardsFilePublisher"
        initializationOrder = 1000

        config = {
          safe = "    ", unsafe = " ~~ ", empty = " :: ", king = " Ki ", queen = " Q  ", rook = " R  ", bishop = " B  ", knight = " Kn "
          file = "boards.txt"
          append = false
          bufferSizeInBytes = 2048
        }
      },
      {
        class = "as.chessproblem.publisher.log.AcceptedBoardsLogPublisher"
        initializationOrder = 1000

        config = {
          safe = "    ", unsafe = " ~~ ", empty = " :: ", king = " Ki ", queen = " Q  ", rook = " R  ", bishop = " B  ", knight = " Kn "

          drawBoardsWhileProduced = false
          drawBoardsAtTheEnd = false

          #If greater than 0 will print log like: "Boards count: $acceptedResultsCount" on every Xth produced board
          #(while X is the value of printProducedBoardNumberModuloFactor).
          printProducedBoardNumberModuloFactor = 1000
        }
      },

      # --- accumulators ---

      #{
      #  class = "as.chessproblem.accumulator.AcceptedBoardsAccumulator"
      #  initializationOrder = 1000
      #},
      {
        class = "as.chessproblem.accumulator.AcceptedBoardsFakeAccumulator"
        initializationOrder = 1000
      },

      # --- acceptors ---

      #{
      #  class = "as.chessproblem.acceptor.UniqueBoardsAcceptor"
      #  initializationOrder = 1000
      #},
      {
        class = "as.chessproblem.acceptor.AllBoardsAcceptor"
        initializationOrder = 1000
      },

      # --- transformers ---

      #{
      #  class = "as.chessproblem.transform.FakeUniqueBoardTransformer"
      #  initializationOrder = 1000
      #},
      #{
      #  class = "as.chessproblem.transform.UniqueBoardTransformer"
      #  initializationOrder = 1000
      #},

      # --- boards producer (main algorithm is here) ---

      {
        class = "as.chessproblem.generator.BoardsGenerator"
        initializationOrder = 1100

        config = {
          # the number of parallel streams that will pull boards from streams
          # use 0 if you want dynamically use all cores in current machine (given by Runtime.availableProcessors)
          parallelProcessingFactor = 0
        }
      },

      # currently there is no UniqueBoardsGenerator implementation
      #{
      #  class = "as.chessproblem.generator.UniqueBoardsGenerator"
      #  initializationOrder = 1100
      #},

      # --- command line arguments parser ---

      {
        class = "as.chessproblem.cmdline.CommandLineArgumentsParser"
        initializationOrder = 2000
      }
    ]
  }

  # =============================

  commandLine {
    overrideOriginallyPassedArguments = false

    # non unique boards: 3063828
    # - 2014-02-18: laptop at home, i7 Q740 8 cores 1,73GHz (4 cores with hyper threading), took 473 seconds (7.8 minutes) - 8 actors are pulling from 8 streams
    # - 2014-02-18: laptop at home, i7 Q740 8 cores 1,73GHz (4 cores with hyper threading), took  1791 seconds (29.9 minutes) - 1 actor is pulling from 1 stream
    # - 2014-02-18: desktop, i5-3470 4 cores 3.2GHz, took 574 seconds (6.5 minutes) - 1 actor is pulling from 1 stream
    # - 2014-02-18: desktop, i5-3470 4 cores 3.2GHz, took 342 seconds (5.7 minutes) - 4 actors are pulling from 4 streams
    # - 2014-02-18: desktop, i5-3470 4 cores 3.2GHz, took 266 seconds (4.3 minutes) - 4 actors are pulling from 4 streams
    #arguments = "7 7 2 King 2 Bishop 2 Queen 1 Knight"

    # non unique boards (?): 44
    #arguments = "3 3 3 LightFlyer 1 King"

    # non unique boards: 4 (unique 1)
    #arguments = "2 2 1 LightFlyer"

    # non unique boards: 6 (unique 2)
    #arguments = "2 2 2 LightFlyer"

    # non unique boards: 9 (unique 3)
    #arguments = "3 3 1 King"

    # non unique boards: 16 (unique 4)
    #arguments = "3 3 2 King"

    # non unique boards: 4 (unique 1)
    #arguments = "3 3 2 King 1 Rook"

    # non unique boards: 8 (unique 2)
    #arguments = "4 4 4 Knight 2 Rook"

    # non unique boards: 2 (unique 1)
    #arguments = "4 4 4 Queen"

    # non unique boards: 10 (unique 2)
    #arguments = "5 5 5 Queen"

    # non unique boards: 4 (unique 1)
    #arguments = "6 6 6 Queen"

    # non unique boards: 40 (unique 6)
    #arguments = "7 7 7 Queen"

    # non unique boards: 92 (unique 12)
    #arguments = "8 8 8 Queen"

    # non unique boards: 352 (unique 46)
    #arguments = "9 9 9 Queen"

    # non unique boards: 724 (unique 92)
    #arguments = "10 10 10 Queen"
  }

  # =============================
}

# We need some back-pressure when a lot of logs is produced.
loggerBoundedMailbox {
  mailbox-type = "akka.dispatch.BoundedMailbox"
  mailbox-capacity = 1000
  mailbox-push-timeout-time = 20s
}

# Original Akka configuration starts here.
akka {

  log-dead-letters = 20
  log-dead-letters-during-shutdown = off

  loglevel = "INFO"
  stdout-loglevel = "DEBUG"

  loggers = ["akka.event.slf4j.Slf4jLogger"]

  actor {

    debug {
      lifecycle = on
    }

    # Just for testing purposes - enable them if you want to be sure that all messages and creators are serializable.
    serialize-creators = off
    serialize-messages = off

    deployment {
      /system/log1-Slf4jLogger {
        mailbox = loggerBoundedMailbox
      }
    }
  }
}
